- name: Clone change_modifiers repo
  git:
    repo: '{{ macos_prefs_change_modifiers_remote_repo }}'
    dest: '{{ macos_prefs_change_modifiers_local_repo }}'
    update: no

- name: Remap modifier keys
  command:
    argv:
      - python
      - '{{ macos_prefs_change_modifiers_local_repo }}/change_modifiers.py'
      - set
      - caps_lock,control
      - command,option
      - option,command
  register: change_modifiers
  changed_when: change_modifiers.stdout

- name: Clone Display Manager repo
  git:
    repo: '{{ macos_prefs_display_manager_remote_repo }}'
    dest: '{{ macos_prefs_display_manager_local_repo }}'
    update: no

- name: Get Apple's default resolution for the main display
  command:
    argv:
      - /usr/bin/python
      - '{{ macos_prefs_display_manager }}'
      - show
      - default
      - main
  register: default_resolution
  changed_when: false

- name: Set default resolution fact
  set_fact:
    macos_prefs_this_mac_default_resolution: >-
        {{ default_resolution.stdout
           | regex_replace("(?s)^.*resolution:\s*(\d+x\d+).*$", "\1") }}

- name: Set desired resolution fact
  set_fact:
    macos_prefs_this_mac_desired_resolution: >-
        {{
            macos_prefs_desired_resolutions[
                macos_prefs_this_mac_default_resolution
            ]
        }}

- name: Get current resolution
  shell: /usr/bin/python '{{ macos_prefs_display_manager | quote }}'
         show current main | awk '/^resolution:/{print $2}'
  register: current_resolution
  changed_when: False

- name: Set resolution
  command:
    argv: [/usr/bin/python, '{{ macos_prefs_display_manager }}',
           res,
           '{{ macos_prefs_this_mac_desired_resolution | replace("x", " ") }}',
           0, only-hidpi, main]
  when: >-
      not ansible_check_mode
      and (
          current_resolution.stdout.strip()
          != macos_prefs_this_mac_desired_resolution
      )

- name: Set preferences
  x_osx_defaults:
    state: '{{ item.state | default("present") }}'
    host: '{{ item.host | default }}'
    domain: '{{ item.domain | default("NSGlobalDomain") }}'
    key: '{{ item.key }}'
    type: '{{ item.type | default }}'
    value: '{{ item.value | default }}'
  become: '{{ item.become | default(False) }}'
  when: 'item.when | default(True)'
  loop: '{{ macos_prefs_set }}'

- name: Set power preferences
  pmset:
    type: '{{ item.0 }}'
    name: '{{ item.1 }}'
    value: '{{ item.2 }}'
  loop:
    - [charger, sleep, '0']
    - [battery, sleep, '5']
  become: yes
