- name: Install Homebrew packages
  homebrew:
    update_homebrew: true
    state: present
    name: '{{ other_software_homebrew }}'
  tags: [slow]

# I don't want to install this from Homebrew because it builds it from
# source, since my Homebrew installation isn't in /usr/local, and that
# takes forever.
- name: Install Pandoc
  command:
    argv: ['{{ macfit }}', --github, '^pandoc-[0-9.]+-{{ ansible_machine }}-macOS.pkg$', jgm/pandoc]
    creates: /usr/local/bin/pandoc
  become: yes

- block:
  - name: Install system-wide casks
    homebrew_cask:
      state: present
      name: '{{ other_software_system_casks }}'
      path: '{{ homebrew_sudo_wrapper | dirname }}'
    notify:
      - Run macsigcheck

  - name: Install intel-power-gadget on Intel machines
    homebrew_cask:
      name: intel-power-gadget
      state: present
      path: '{{ homebrew_sudo_wrapper | dirname }}'
    when: 'ansible_machine == "x86_64"'
    notify:
      - Run macsigcheck

  become: yes
  environment:
    # Necessary so our wrapper script can find the real "brew".
    PATH: '{{ homebrew_bin }}:{{ ansible_env.PATH }}'
  tags: [slow, homebrew_casks]

- name: Remove user from access_bpf group
  # because it is whack that my every day user account has access to
  # the BPF devices.  Wireshark does this.
  dsedivec.ansible_dlc.osx_group_member:
    group: access_bpf
    user: '{{ ansible_user_id }}'
    state: absent
  become: true

- name: Install casks in home directory
  homebrew_cask:
    name: >
      {{ other_software_user_casks
         | filter_casks_by_os_version(ansible_distribution_major_version)
         | list }}
    state: present
    path: '{{ homebrew_bin }}'
    install_options: 'appdir={{ user_app_dir }}'
  tags: [slow, homebrew_casks]
  notify:
    - Run macsigcheck

- when: '"plex" in other_software_user_casks'
  block:
    - name: Check if PMP Helper is running
      command:
        argv: [pgrep, PMP Helper]
      register: pgrep
      failed_when: 'pgrep.rc > 1'
      changed_when: False

    - name: Disable Plex's mysterious PMP Helper
      command:
        argv: [
          launchctl, unload, -w,
          '{{ ansible_env.HOME }}/Library/LaunchAgents/tv.plex.player-helper.plist',
        ]
      when: 'pgrep.rc == 0'

- name: Set VLC preferences
  when: '"vlc" in other_software_user_casks'
  ini_file:
    path: '{{ ansible_env.HOME }}/Library/Preferences/org.videolan.vlc/vlcrc'
    state: present
    section: '{{ item.0 }}'
    option: '{{ item.1 }}'
    value: '{{ item.2 }}'
  loop:
    - [macosx, macosx-statusicon, 0]
    - [core, audio-replay-gain-mode, album]

# NOTE: If you get "redownloading" errors, you should try initiating
# an install through the App Store GUI.  I had to do this for MS
# Office apps.  I had to click *each one* and enter my Apple ID
# password *for each one*, for some reason.  Once the download started
# there, I was able to cancel it, then re-run this task, and it worked
# fine.
- name: Install software from Mac App Store
  command: mas install {{ item.0 }}
  args:
    creates: '{{ item.1 }}'
  loop: '{{ other_software_mac_app_store }}'
  notify:
    - Run macsigcheck

- name: Set preferences for software we just installed
  dsedivec.ansible_dlc.x_osx_defaults:
    domain: '{{ item.domain | expanduser }}'
    key: '{{ item.key }}'
    value_type: '{{ item.type }}'
    value: '{{ item.value }}'
  loop: '{{
      other_software_preferences
      | dict_product
      | map("flatten", levels=1)
      | named_list(["domain", "key", "type", "value"])
      | list
  }}'

- name: Put software on the Dock
  command:
    argv: ['{{ dockutil }}', --add, '{{ item }}', --no-restart]
  when: '(item|basename|splitext).0 not in macos_dock_items'
  loop: '{{ other_software_add_dock }}'
  notify:
    - Restart Dock

# For no reason I can fathom, SPAN will only work when installed under
# /Library, and not when installed under ~/Library.  ¯\_(ツ)_/¯
- name: Check for existence of Voxengo SPAN Audio Unit (spectrum analyzer)
  stat:
    path: '{{ other_software_system_audio_units_dir }}/SPAN.component'
  register: voxengo_span_dir

- name: Scrape download URL for Voxengo SPAN
  dsedivec.ansible_dlc.scrape_urls:
    url: https://www.voxengo.com/product/span/
    url_regexp: '(?i)https://www\.voxengo\.com/files/VoxengoSPAN_[\d.]+_Mac_AU_AAX_setup.dmg'
  register: voxengo_span_urls
  when: 'not voxengo_span_dir.stat.exists'
  failed_when: 'not voxengo_span_urls.urls'

- name: Install Voxengo SPAN
  dsedivec.ansible_dlc.extract_dmg:
    src: '{{ voxengo_span_urls.urls[0] }}'
    dest: '{{ other_software_system_audio_units_dir }}/'
    regexp: '(?i)^SPAN\.component$'
  when: 'not voxengo_span_dir.stat.exists'
  become: yes
  notify:
    - Recognize new Audio Units

- name: Check for existence of LoudMax Audio Unit
  stat:
    path: '{{ other_software_user_audio_units_dir }}/LoudMax.component'
  register: loudmax_dir

- name: Scrape URL for LoudMax
  dsedivec.ansible_dlc.scrape_urls:
    url: https://pluginguru.net/loudmax-for-mac/
    url_regexp: '(?i)\bLoudMax_v[0-9]+_[0-9]+_Mac_Notarized.zip\b'
  register: loudmax_urls
  when: 'not loudmax_dir.stat.exists'
  failed_when: 'not loudmax_urls.urls'

- name: Install LoudMax
  dsedivec.ansible_dlc.dl_and_extract:
    url: '{{ loudmax_urls.urls[0] | make_dropbox_url_dl }}'
    dest: '{{ other_software_user_audio_units_dir }}'
    regexp: '(?ix) (?: ^|/ ) (?P<dest> loudmax\.component ) $'
  when: 'not loudmax_dir.stat.exists'
  notify:
    - Recognize new Audio Units

- name: Install software via pipx
  community.general.pipx:
    name: '{{ item }}'
    state: present
    python: '{{ other_software_pipx_python }}'
  loop: '{{ other_software_pipx }}'

- name: Install VisiData optional packages
  community.general.pipx:
    name: visidata
    state: inject
    inject_packages:
      - openpyxl
      - xlrd

- name: Install html2email
  community.general.pipx:
    name: html2email
    source: git+https://github.com/dsedivec/html2email.git
    state: present
    python: '{{ homebrew_bin }}/python3'

# This lets me print envelopes correctly.  Not 100% convinced I need
# this for printing envelopes from LibreOffice.
#
# - name: Install Brother printer drivers
#   command:
#     argv: ['{{ macfit }}', '--check-signature', 'id:5HCL85FLGW',
#            'https://download.brother.com/welcome/dlf104419/Brother_PrinterDrivers_MonochromeLaser_1_3_0.dmg']
#   become: true
#   when: '"com.Brother.Brotherdriver.Brother_PrinterDrivers_MonochromeLaser" not in macos_installed_pkgs'
