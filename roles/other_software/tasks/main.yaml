- name: Install packages from MacPorts
  x_macports:
    name: '{{ other_software_macports }}'
    state: present
  become: true
  tags: [slow]

- name: Check if sleepwatcher is running
  command: pgrep sleepwatcher
  register: pgrep
  failed_when: 'pgrep.rc > 1'
  changed_when: false

- name: Start sleepwatcher
  command: port load sleepwatcher
  become: true
  when: 'pgrep.rc != 0'

# I don't want to install this from Homebrew because it builds it from
# source, since my Homebrew installation isn't in /usr/local, and that
# takes forever.
- name: Install Pandoc
  command:
    argv: ['{{ macfit }}', --github, '^pandoc-[0-9.]+-macOS.pkg$', jgm/pandoc]
    creates: /usr/local/bin/pandoc
  become: yes

- name: Install system-wide casks
  homebrew_cask:
    name: '{{ other_software_system_casks }}'
    state: present
    path: '{{ homebrew_sudo_wrapper | dirname }}'
  become: yes
  environment:
    # Necessary so our wrapper script can find the real "brew".
    PATH: '{{ homebrew_bin }}:{{ ansible_env.PATH }}'
  tags: [slow, homebrew_casks]
  notify:
    - Run macsigcheck

- name: Remove user from access_bpf group
  # because it is whack that my every day user account has access to
  # the BPF devices.  Wireshark does this.
  osx_group_member:
    group: access_bpf
    user: '{{ ansible_user }}'
    state: absent
  become: true

- name: Install casks in home directory
  homebrew_cask:
    name: >
      {{ other_software_user_casks
         | filter_casks_by_os_version(ansible_distribution_minor_version)
         | list }}
    state: present
    path: '{{ homebrew_bin }}'
    install_options: 'appdir={{ user_app_dir }}'
  tags: [slow, homebrew_casks]
  notify:
    - Run macsigcheck

- name: Check if PMP Helper is running
  command:
    argv: [pgrep, PMP Helper]
  register: pgrep
  failed_when: 'pgrep.rc > 1'
  changed_when: False

- name: Disable Plex's mysterious PMP Helper
  command:
    argv: [
      launchctl, unload, -w,
      '{{ ansible_env.HOME }}/Library/LaunchAgents/tv.plex.player-helper.plist',
    ]
  when: 'pgrep.rc == 0'

- name: Set VLC preferences
  ini_file:
    path: '{{ ansible_env.HOME }}/Library/Preferences/org.videolan.vlc/vlcrc'
    state: present
    section: '{{ item.0 }}'
    option: '{{ item.1 }}'
    value: '{{ item.2 }}'
  loop:
    - [macosx, macosx-statusicon, 0]
    - [core, audio-replay-gain-mode, album]

- name: Install software from Mac App Store
  command: mas install {{ item.0 }}
  args:
    creates: '{{ item.1 }}'
  loop: '{{ other_software_mac_app_store }}'
  notify:
    - Run macsigcheck

- name: Set preferences for software we just installed
  x_osx_defaults:
    domain: '{{ item.domain | expanduser }}'
    key: '{{ item.key }}'
    value_type: '{{ item.type }}'
    value: '{{ item.value }}'
  loop: '{{
      other_software_preferences
      | dict_product
      | map("flatten", levels=1)
      | named_list(["domain", "key", "type", "value"])
      | list
  }}'

# Copying a working plist wholesale because there are a shitload of
# preferences to set otherwise, including a complicated array of
# custom commands.
- name: Install Moom settings
  copy:
    # Note: This file was produced from a working, configured install
    # of Moom with "plutil -convert xml1" on the *binary* plist file.
    src: com.manytricks.Moom.plist
    dest: '{{ ansible_env.HOME }}/Library/Preferences/'
    # Don't overwrite if the file exists.
    force: no

- name: Put software on the Dock
  command:
    argv: [dockutil, --add, '{{ item }}', --no-restart]
  when: '(item|basename|splitext).0 not in macos_dock_items'
  loop: '{{ other_software_add_dock }}'
  notify:
    - Restart Dock

- name: Install Python 3 software in {{ user_py3_venv_dir }}
  pip:
    virtualenv: '{{ user_py3_venv_dir }}'
    name: '{{ other_software_py3_venv }}'
    state: present

- name: Symlink Python software into {{ user_bin_dir }}
  file:
    state: link
    src: '{{ user_py3_venv_bin | relpath(user_bin_dir) }}/{{ item }}'
    path: '{{ user_bin_dir }}/{{ item }}'
  loop: [onkyo, vd, proselint, ydiff]
  ignore_errors: '{{ ansible_check_mode }}'

- name: Install SilentKnight
  command:
    argv: ['{{ macfit }}', --check-bundle-signature, QWY4LRW926,
           --scrape-html, '(?i)/silentknight\d.*\.zip$',
           https://eclecticlight.co/lockrattler-systhist/]
    creates: '{{ user_app_dir }}/SilentKnight.app'

- name: Install Go
  x_macports:
    name: go
    state: present
  become: yes

- name: Install gocryptfs
  script: install_gocryptfs.py {{ user_bin_dir | quote }}
  args:
    creates: '{{ user_bin_dir }}/gocryptfs'

# This lets me print envelopes correctly.  Not 100% convinced I need
# this for printing envelopes from LibreOffice.
#
# - name: Install Brother printer drivers
#   command:
#     argv: ['{{ macfit }}', '--check-signature', 'id:5HCL85FLGW',
#            'https://download.brother.com/welcome/dlf104419/Brother_PrinterDrivers_MonochromeLaser_1_3_0.dmg']
#   become: true
#   when: '"com.Brother.Brotherdriver.Brother_PrinterDrivers_MonochromeLaser" not in macos_installed_pkgs'
