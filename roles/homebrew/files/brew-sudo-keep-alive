#!/usr/bin/env python3

from __future__ import (
    absolute_import,
    division,
    print_function,
    unicode_literals,
)

import errno
import fcntl
import logging
import os
import os.path
import select
import signal
import subprocess
import sys


def main(argv):
    sudo_refresh_rate = int(os.environ.get("SUDO_REFRESH_RATE", 45))
    uid = int(os.environ["SUDO_UID"])
    gid = int(os.environ["SUDO_GID"])
    sudo_user = os.environ["SUDO_USER"]
    child_pid = os.fork()
    if child_pid == 0:
        real_brew = os.environ.get("REAL_BREW", "brew")
        cmd = ["sudo", "-n", "-H", "-u", sudo_user, real_brew]
        cmd.extend(argv[1:])
        os.execvp(cmd[0], cmd)
        raise Exception("should not get here")
    os.setgroups([gid])
    os.setregid(gid, gid)
    os.setreuid(uid, uid)
    logging.basicConfig()
    if "DEBUG_BREW_WRAPPER" in os.environ:
        logging.getLogger().setLevel(logging.DEBUG)
    # https://stackoverflow.com/a/290025
    rd, wr = os.pipe()
    for fd in rd, wr:
        flags = fcntl.fcntl(fd, fcntl.F_GETFL)
        flags |= os.O_NONBLOCK
        fcntl.fcntl(fd, fcntl.F_SETFL, flags)

    def read_pipe(num_bytes):
        try:
            os.read(rd, num_bytes)
            logging.debug("read %r byte(s) from pipe", num_bytes)
        except os.error as ex:
            if ex.errno != errno.EAGAIN:
                raise
            logging.debug("reading pipe returned EAGAIN")

    def sigchld_handler(_signal, _frame):
        logging.debug("handling SIGCHLD")
        os.write(wr, b"\0")

    signal.signal(signal.SIGCHLD, sigchld_handler)
    # Don't let SIGCHLD interrupt waitpid, particularly the one
    # waiting on sudo.
    signal.siginterrupt(signal.SIGCHLD, False)
    while True:
        logging.debug("waitpid")
        exited_pid, status = os.waitpid(child_pid, os.WNOHANG)
        if exited_pid != 0:
            logging.debug("child PID %r exited, status=%r", exited_pid, status)
            break
        logging.debug("refreshing sudo time stamp")
        sudo = subprocess.Popen(["sudo", "-v", "-n"])
        _, sudo_status = os.waitpid(sudo.pid, 0)
        if not os.WIFEXITED(sudo_status) or os.WEXITSTATUS(sudo_status) != 0:
            raise Exception("sudo refresh failed, status=%r" % (sudo_status,))
        read_pipe(1)
        logging.debug("entering select")
        try:
            ready, _, _ = select.select([rd], [], [], sudo_refresh_rate)
        except select.error as ex:
            if ex.args[0] != errno.EINTR:
                raise
            logging.debug("select interrupted")
        else:
            if ready:
                read_pipe(1)
    if os.WIFEXITED(status):
        return os.WEXITSTATUS(status)
    else:
        return -1


if __name__ == "__main__":
    sys.exit(main(sys.argv))
